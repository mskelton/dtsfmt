== should format include ==
 #	include "foo.dtsi"
   # include   <bar.dtsi>

[expect]
#include "foo.dtsi"
#include <bar.dtsi>

== include works in nodes ==
/ {
     #include "foo.dtsi"
   #include    <bar.dtsi>
};

[expect]
/ {
  #include "foo.dtsi"
  #include <bar.dtsi>

};

== should add newline before next node ==
behaviors {
  #include "foo.dtsi"

  #include "bar.dtsi"
  dm: dual_mod_key {
    compatible = "zmk,behavior-hold-tap";
  };
};

[expect]
behaviors {
  #include "foo.dtsi"
  #include "bar.dtsi"

  dm: dual_mod_key {
    compatible = "zmk,behavior-hold-tap";
  };
};

== should format define ==
#define  DEFAULT 0

#define   WINDOW   1  

[expect]
#define DEFAULT 0
#define WINDOW 1

== should support ifdef ==
  #ifdef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";

          label = "macro_version";
        #binding-cells = <0>;
    bindings = <&kp RET>;
        };
#endif

[expect]
#ifdef VERSION_MACRO
macro_ver: macro_ver {
  compatible = "zmk,behavior-macro";
  label = "macro_version";
  #binding-cells = <0>;
  bindings = <&kp RET>;
};
#endif

== should support ifdef in nodes ==
/ {
  #ifdef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";

          label = "macro_version";
        #binding-cells = <0>;
    bindings = <&kp RET>;
        };
#endif
};

[expect]
/ {
  #ifdef VERSION_MACRO
  macro_ver: macro_ver {
    compatible = "zmk,behavior-macro";
    label = "macro_version";
    #binding-cells = <0>;
    bindings = <&kp RET>;
  };
  #endif
};

== should support ifndef ==
  #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";

          label = "macro_version";
        #binding-cells = <0>;
    bindings = <&kp RET>;
        };
#endif

[expect]
#ifndef VERSION_MACRO
macro_ver: macro_ver {
  compatible = "zmk,behavior-macro";
  label = "macro_version";
  #binding-cells = <0>;
  bindings = <&kp RET>;
};
#endif

== should support ifndef in nodes ==
/ {
  #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";

          label = "macro_version";
        #binding-cells = <0>;
    bindings = <&kp RET>;
        };
#endif
};

[expect]
/ {
  #ifndef VERSION_MACRO
  macro_ver: macro_ver {
    compatible = "zmk,behavior-macro";
    label = "macro_version";
    #binding-cells = <0>;
    bindings = <&kp RET>;
  };
  #endif
};
